import * as R from 'ramda';
import {Transform} from 'class-transformer';
import {
  Entity, Column, OneToOne,
  ManyToMany, OneToMany, JoinTable,
  JoinColumn, ManyToOne, RelationId, Index,
} from 'typeorm';

import {Language} from '@shared/enums/language';
import {DatedRecordEntity} from '../database/DatedRecord.entity';
import {TagEntity} from '../tag/Tag.entity';
import {BookAuthorEntity} from './modules/author/BookAuthor.entity';
import {BookCategoryEntity} from './modules/category/BookCategory.entity';
import {BookReviewEntity} from './modules/review/BookReview.entity';
import {BookReleaseEntity, BookType} from './modules/release/BookRelease.entity';
import {BookVolumeEntity} from './modules/volume/BookVolume.entity';
import {BookSeriesEntity} from './modules/series/BookSeries.entity';
import {BookPrizeEntity} from './modules/prize/BookPrize.entity';
import {BookKindEntity} from './modules/kind/BookKind.entity';

@Entity(
  {
    name: 'book',
  },
)
@Index(['hierarchicSeries'])
export class BookEntity extends DatedRecordEntity {
  @Column('text', {unique: true, nullable: true})
  parameterizedSlug: string;

  @Column('citext')
  defaultTitle: string;

  @Column(
    {
      type: 'enum',
      enum: Language,
      nullable: true,
    },
  )
  originalLang: Language;

  @Column('citext', {nullable: true})
  originalTitle: string;

  @Column('text', {nullable: true})
  originalPublishDate: string;

  @Column('text', {nullable: true})
  description: string;

  @Column('text', {nullable: true})
  taggedDescription: string;

  @JoinTable()
  @ManyToMany(() => BookAuthorEntity, (author) => author.books)
  authors: BookAuthorEntity[];

  @JoinTable()
  @ManyToMany(
    () => BookCategoryEntity,
    (categoryEntity) => categoryEntity.books,
    {
      cascade: true,
    },
  )
  categories: BookCategoryEntity[];

  @OneToMany(() => BookReviewEntity, (review) => review.book)
  reviews: BookReviewEntity[];

  @Transform(R.map(R.prop('name')) as any)
  @JoinTable()
  @ManyToMany(
    () => TagEntity,
    {
      cascade: true,
    },
  )
  tags: TagEntity[];

  @OneToOne(() => BookReleaseEntity, {onDelete: 'SET NULL'})
  @JoinColumn({name: 'primaryReleaseId'})
  primaryRelease: BookReleaseEntity;

  @Column({nullable: true})
  @RelationId((entity: BookEntity) => entity.primaryRelease)
  primaryReleaseId: number;

  @OneToMany(
    () => BookReleaseEntity,
    (entity) => entity.book,
    {
      cascade: true,
    },
  )
  releases: BookReleaseEntity[];

  @ManyToOne(() => BookSeriesEntity, {onDelete: 'SET NULL'})
  @JoinColumn({name: 'hierarchicSeriesId'})
  hierarchicSeries: BookSeriesEntity;

  @Column({nullable: true})
  @RelationId((entity: BookEntity) => entity.hierarchicSeries)
  hierarchicSeriesId: number;

  @ManyToOne(() => BookVolumeEntity, {onDelete: 'CASCADE'})
  @JoinColumn({name: 'volumeId'})
  volume: BookVolumeEntity;

  @Column({nullable: true})
  @RelationId((entity: BookEntity) => entity.volume)
  volumeId: number;

  @JoinTable()
  @ManyToMany(
    () => BookSeriesEntity,
    {
      cascade: true,
    },
  )
  series: BookSeriesEntity[];

  @JoinTable()
  @ManyToMany(
    () => BookPrizeEntity,
    {
      cascade: true,
    },
  )
  prizes: BookPrizeEntity[];

  @ManyToOne(() => BookKindEntity, {onDelete: 'CASCADE'})
  @JoinColumn({name: 'kindId'})
  kind: BookKindEntity;

  @Column({nullable: true})
  @RelationId((entity: BookEntity) => entity.kind)
  kindId: number;

  /** <AUTOGENERATED COLUMNS> */
  @Column('float', {nullable: true})
  avgRating: number;

  @Column('integer', {nullable: true})
  totalRatings: number;

  @Column(
    'decimal',
    {
      precision: 5,
      scale: 2,
      nullable: true,
    },
  )
  lowestPrice: number;

  @Column(
    'decimal',
    {
      precision: 5,
      scale: 2,
      nullable: true,
    },
  )
  highestPrice: number;

  @Column(
    {
      type: 'enum',
      enum: BookType,
      array: true,
      default: [],
    },
  )
  allTypes: BookType[];
  /** </AUTOGENERATED COLUMNS> */

  constructor(partial?: Partial<BookEntity>) {
    super();

    if (partial)
      Object.assign(this, partial);
  }
}
