import * as R from 'ramda';
import {Transform} from 'class-transformer';
import {
  Column, Index, ManyToOne,
  JoinColumn, RelationId,
  JoinTable, ManyToMany,
  BeforeInsert, BeforeUpdate,
  OneToMany,
} from 'typeorm';

import {parameterize} from '@shared/helpers/parameterize';

import {
  RemoteRecordEntity,
  RemoteRecordFields,
} from '@server/modules/remote/entity/RemoteRecord.entity';

import {BrandEntity} from '@server/modules/brand/entity/Brand.entity';
import {TagEntity} from '@server/modules/tag/Tag.entity';
import {BrochurePageEntity} from '../modules/brochure-page/BrochurePage.entity';

@RemoteRecordEntity(
  {
    name: 'brochure',
  },
)
@Index(['brand'])
export class BrochureEntity extends RemoteRecordFields {
  @Column('text')
  title: string;

  @Column('text', {unique: true})
  parameterizedName: string;

  @Column('timestamp', {nullable: true})
  validFrom: Date;

  @Column('timestamp', {nullable: true})
  validTo: Date;

  @ManyToOne(() => BrandEntity)
  @JoinColumn({name: 'brandId'})
  brand: BrandEntity;

  @Column()
  @RelationId((entity: BrochureEntity) => entity.brand)
  brandId: number;

  @OneToMany(() => BrochurePageEntity, (page) => page.brochure)
  pages: BrochurePageEntity[];

  @Transform(R.map(R.prop('name')) as any)
  @JoinTable()
  @ManyToMany(
    () => TagEntity,
    {
      cascade: true,
    },
  )
  tags: TagEntity[];

  /** <AUTOGENERATED COLUMNS> */
  @Column('int', {nullable: true})
  totalPages: number;
  /** </AUTOGENERATED COLUMNS> */

  @BeforeInsert()
  @BeforeUpdate()
  transformFields() {
    const {title} = this;

    if (title) {
      this.title = title.trim();
      this.parameterizedName = parameterize(this.title);
    }
  }
}
